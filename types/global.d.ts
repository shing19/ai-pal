// types/global.d.ts
import { Message } from 'ai/react'

interface ConversationWithinContext {
  context: Message[];           // clear context, for openai
  createdAt: Date;
  messages: Message[];
}

interface Project {
  projectId: string;
  projectName: string;
  createdAt: Date;
  lastEditedAt: Date;
  context: Message[];
  conversations: ConversationWithinContext[];
}

declare global {
  interface Window {
    projects: Project[];
  }
}




// 搬运自 ai/react 避免类型报错

interface Function {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain
   * underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * The parameters the functions accepts, described as a JSON Schema object. See the
   * [guide](/docs/guides/gpt/function-calling) for examples, and the
   * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for
   * documentation about the format.
   *
   * To describe a function that accepts no parameters, provide the value
   * `{"type": "object", "properties": {}}`.
   */
  parameters: Record<string, unknown>;
  /**
   * A description of what the function does, used by the model to choose when and
   * how to call the function.
   */
  description?: string;
}
interface FunctionCall {
  /**
   * The arguments to call the function with, as generated by the model in JSON
   * format. Note that the model does not always generate valid JSON, and may
   * hallucinate parameters not defined by your function schema. Validate the
   * arguments in your code before calling your function.
   */
  arguments?: string;
  /**
   * The name of the function to call.
   */
  name?: string;
}
type RequestOptions = {
  headers?: Record<string, string> | Headers;
  body?: object;
};
interface Tool {
  type: 'function';
  function: Function;
}
type ToolChoice = 'none' | 'auto' | {
    type: 'function';
    function: {
        name: string;
    };
};
type ChatRequestOptions = {
  options?: RequestOptions;
  functions?: Array<Function>;
  function_call?: FunctionCall;
  tools?: Array<Tool>;
  tool_choice?: ToolChoice;
  data?: Record<string, string>;
};

export { MessageLog, ConversationWithinContext, Project, ChatRequestOptions };